/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace RakNet {

using System;
using System.Runtime.InteropServices;

public class RakNetListSocketDescriptor : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RakNetListSocketDescriptor(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RakNetListSocketDescriptor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RakNetListSocketDescriptor() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RakNetPINVOKE.delete_RakNetListSocketDescriptor(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

    public SocketDescriptor this[int index]  
    {  
        get   
        {
            return Get((uint)index); // use indexto retrieve and return another value.    
        }  
        set   
        {
            Replace(value, value, (uint)index, "Not used", 0);// use index and value to set the value somewhere.   
        }  
    } 

  public RakNetListSocketDescriptor() : this(RakNetPINVOKE.new_RakNetListSocketDescriptor__SWIG_0(), true) {
  }

  public RakNetListSocketDescriptor(RakNetListSocketDescriptor original_copy) : this(RakNetPINVOKE.new_RakNetListSocketDescriptor__SWIG_1(RakNetListSocketDescriptor.getCPtr(original_copy)), true) {
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public RakNetListSocketDescriptor CopyData(RakNetListSocketDescriptor original_copy) {
    RakNetListSocketDescriptor ret = new RakNetListSocketDescriptor(RakNetPINVOKE.RakNetListSocketDescriptor_CopyData(swigCPtr, RakNetListSocketDescriptor.getCPtr(original_copy)), false);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SocketDescriptor Get(uint position) {
    SocketDescriptor ret = new SocketDescriptor(RakNetPINVOKE.RakNetListSocketDescriptor_Get(swigCPtr, position), false);
    return ret;
  }

  public void Push(SocketDescriptor input, string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Push(swigCPtr, SocketDescriptor.getCPtr(input), file, line);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public SocketDescriptor Pop() {
    SocketDescriptor ret = new SocketDescriptor(RakNetPINVOKE.RakNetListSocketDescriptor_Pop(swigCPtr), false);
    return ret;
  }

  public void Insert(SocketDescriptor input, uint position, string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Insert__SWIG_0(swigCPtr, SocketDescriptor.getCPtr(input), position, file, line);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Insert(SocketDescriptor input, string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Insert__SWIG_1(swigCPtr, SocketDescriptor.getCPtr(input), file, line);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Replace(SocketDescriptor input, SocketDescriptor filler, uint position, string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Replace__SWIG_0(swigCPtr, SocketDescriptor.getCPtr(input), SocketDescriptor.getCPtr(filler), position, file, line);
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Replace(SocketDescriptor input) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Replace__SWIG_1(swigCPtr, SocketDescriptor.getCPtr(input));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAtIndex(uint position) {
    RakNetPINVOKE.RakNetListSocketDescriptor_RemoveAtIndex(swigCPtr, position);
  }

  public void RemoveAtIndexFast(uint position) {
    RakNetPINVOKE.RakNetListSocketDescriptor_RemoveAtIndexFast(swigCPtr, position);
  }

  public void RemoveFromEnd(uint num) {
    RakNetPINVOKE.RakNetListSocketDescriptor_RemoveFromEnd__SWIG_0(swigCPtr, num);
  }

  public void RemoveFromEnd() {
    RakNetPINVOKE.RakNetListSocketDescriptor_RemoveFromEnd__SWIG_1(swigCPtr);
  }

  public uint GetIndexOf(SocketDescriptor input) {
    uint ret = RakNetPINVOKE.RakNetListSocketDescriptor_GetIndexOf(swigCPtr, SocketDescriptor.getCPtr(input));
    if (RakNetPINVOKE.SWIGPendingException.Pending) throw RakNetPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Size() {
    uint ret = RakNetPINVOKE.RakNetListSocketDescriptor_Size(swigCPtr);
    return ret;
  }

  public void Clear(bool doNotDeallocateSmallBlocks, string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Clear(swigCPtr, doNotDeallocateSmallBlocks, file, line);
  }

  public void Preallocate(uint countNeeded, string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Preallocate(swigCPtr, countNeeded, file, line);
  }

  public void Compress(string file, uint line) {
    RakNetPINVOKE.RakNetListSocketDescriptor_Compress(swigCPtr, file, line);
  }

}

}
